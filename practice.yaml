AWSTemplateFormatVersion: '2010-09-09'
Description: CloudFormation template to create create a vpc with 1 public subnet with 1 
#ec2 instance with apache and make sure the website is working on its public ip. 
#Then create a private subnet with nat gateway and create a private server and install git using userdata. 
#SSH to the private server to make sure git is installed.

Parameters:
  VpcCIDR:
    Type: String
    Description: CIDR block for the VPC (e.g., 10.0.0.0/16)
    Default: 10.0.0.0/16
  

  PublicSubnetCIDR:
    Type: String
    Description: CIDR block for the subnet (e.g., 10.0.1.0/24)
    Default: 10.0.1.0/24
    AllowedPattern: "(\\d{1,3}\\.){3}\\d{1,3}/(\\d{1,2})"
    ConstraintDescription: Must be a valid IP subnet of the form x.x.x.x/x.

  PrivateSubnetCIDR:
    Type: String
    Description: CIDR block for the private subnet (e.g., 10.0.2.0/24)
    Default: 10.0.2.0/24

  InstanceType:
    Type: String
    Description: EC2 instance type
    Default: t2.micro
    AllowedValues:
      - t2.micro
      - t2.small
      - t2.medium

  MyKey:
    Type: AWS::EC2::KeyPair::KeyName
    Description: Key pair for SSH access to the EC2 instance.

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: MyVPC

  # Create a Public Subnet
  PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties: 
      VpcId: !Ref VPC
      CidrBlock: !Ref PublicSubnetCIDR
      AvailabilityZone: us-west-2b # Explicitly use us-west-2b
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: PublicSubnet

   # Private Subnet
  PrivateSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PrivateSubnetCIDR
      AvailabilityZone: us-west-2b # Explicitly use us-west-2a
      Tags:
        - Key: Name
          Value: PrivateSubnet

     # Internet Gateway     
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: InternetGateway  

# Attach Internet Gateway to the VPC
  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

# Create a Route Table for Public Subnet
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: PublicRouteTable
        
  # Add a Route to the Internet Gateway
  PublicRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  # Associate the Subnet with the Route Table
  PublicSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet
      RouteTableId: !Ref PublicRouteTable  

  # Allocate an Elastic IP for NAT Gateway
  NatGatewayEIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
  # NAT Gateway
  NatGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGatewayEIP.AllocationId
      SubnetId: !Ref PublicSubnet
      Tags:
        - Key: Name
          Value: NatGateway

  # Private Route Table
  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: PrivateRouteTable

  # Add Route for NAT Gateway in Private route table
  PrivateRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway

  # Associate Private Subnet with Route Table
  PrivateSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet
      RouteTableId: !Ref PrivateRouteTable

  # Create a Security Group for public EC2
  PublicSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow HTTP and SSH access
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: PublicWebServerSG

   # Create a Security Group for private EC2
  PrivateSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow SSH access from public EC2
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          SourceSecurityGroupId: !Ref PublicSecurityGroup
       
      Tags:
        - Key: Name
          Value: PrivateWebServerSG

  # Create a public  EC2 Instance
  PublicEC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: !Ref InstanceType
      SubnetId: !Ref PublicSubnet
      SecurityGroupIds:
        - !Ref PublicSecurityGroup
      KeyName: !Ref MyKey # Replace with your key pair name
      ImageId: ami-05d38da78ce859165 # Replace with the latest Ubuntu AMI in your region
      UserData:
        Fn::Base64: |
            #!/bin/bash
            apt-get update -y
            apt-get install -y apache2
            systemctl start apache2
            systemctl enable apache2
            echo "<h1>Welcome to My Website</h1>" > /var/www/html/index.html
      Tags:
        - Key: Name
          Value: PublicWebServer     

  # Private EC2 Instance
  PrivateEC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: !Ref InstanceType
      SubnetId: !Ref PrivateSubnet
      SecurityGroupIds:
        - !Ref PrivateSecurityGroup
      KeyName: !Ref MyKey
      ImageId:  ami-05d38da78ce859165 # Replace with the latest Ubuntu AMI ID for your region
      UserData:
        Fn::Base64: |
          #!/bin/bash
          apt-get update -y
          apt-get install -y git
      Tags:
        - Key: Name
          Value: PrivateGitServer

Outputs:
  WebsiteURL:
    Description: The URL of the Apache web server.
    Value: !GetAtt PublicEC2Instance.PublicIp

